{"version":3,"sources":["components/templates/Cds/Cds.module.scss","components/organisms/CdCardList/CdCardList.module.scss","containers/CdsContainer/store/actionTypes.ts","components/molecules/CdCard/index.tsx","components/organisms/CdCardList/index.tsx","components/templates/Cds/index.tsx","containers/CdsContainer/store/actions.ts","utils/constants.ts","containers/CdsContainer/index.tsx","containers/CdsContainer/store/reducers.ts","stores/appStore.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","container","cdsActionTypes","CdCard","props","react","cd","number","title","CdCardList","className","styles","cds","length","map","CdCard_CdCard","key","Cds","currentPage","onClick","handleClickSwitch","CdCardList_CdCardList","CdsCurrentPage","CdType","SongType","FocusPerformersType","FetchStatus","CdsContianer","connect","state","dispatch","switchCdsPage","page","type","SWITCH_CDS_PAGE","payload","fetchSingles","FETCH_SINGLES_PENDING","fetch","then","res","json","data","FETCH_SINGLES_FULFILLED","catch","err","FETCH_SINGLES_REJECTED","fetchAlbums","FETCH_ALBUMS_PENDING","FETCH_ALBUMS_FULFILLED","FETCH_ALBUMS_REJECTED","cdsContents","useEffect","singles","fetchStatus","Fulfilled","albums","console","log","react_default","a","createElement","Cds_Cds","initialCdsState","None","Single","rootReducer","combineReducers","arguments","undefined","action","Object","objectSpread","Pending","Rejected","slice","sort","itemA","itemB","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","applyMiddleware","promise","thunk","store","createStore","App","es","BrowserRouter","basename","Switch","Route","exact","path","component","Redirect","from","to","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.854af14c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cds_container__3im-Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CdCardList_container__2x2wK\"};","export enum cdsActionTypes {\r\n  FETCH_SINGLES = \"FETCH_SINGLES\",\r\n  FETCH_SINGLES_PENDING = \"FETCH_SINGLES_PENDING\",\r\n  FETCH_SINGLES_REJECTED = \"FETCH_SINGLES_REJECTED\",\r\n  FETCH_SINGLES_FULFILLED = \"FETCH_SINGLES_FULFILLED\",\r\n  FETCH_ALBUMS = \"FETCH_ALBUMS\",\r\n  FETCH_ALBUMS_PENDING = \"FETCH_ALBUMS_PENDING\",\r\n  FETCH_ALBUMS_REJECTED = \"FETCH_ALBUMS_REJECTED\",\r\n  FETCH_ALBUMS_FULFILLED = \"FETCH_ALBUMS_FULFILLED\",\r\n  SWITCH_CDS_PAGE = \"SWITCH_CDS_PAGE\"\r\n}\r\n","import * as React from \"react\";\r\nimport styles from \".CdCard.module.scss\";\r\nimport { ISingle } from \"../../../models/ISingle\";\r\nimport { IAlbum } from \"../../../models/IAlbum\";\r\n\r\ntype ICdProps = {\r\n  cd: ISingle | IAlbum;\r\n};\r\n\r\nexport const CdCard = (props: ICdProps) => (\r\n  <div>\r\n    <strong>{props.cd.number} </strong>\r\n    <span>{props.cd.title}</span>\r\n  </div>\r\n);\r\n","import * as React from \"react\";\r\nimport styles from \"./CdCardList.module.scss\";\r\nimport { ISingle } from \"../../../models/ISingle\";\r\nimport { IAlbum } from \"../../../models/IAlbum\";\r\nimport { CdCard } from \"../../molecules/CdCard\";\r\n\r\ntype ICdCardProps = {\r\n  cds: (ISingle | IAlbum)[];\r\n};\r\n\r\nexport const CdCardList = (props: ICdCardProps) => (\r\n  <div className={styles.container}>\r\n    {props.cds.length !== 0\r\n      ? props.cds.map((cd: ISingle | IAlbum) => (\r\n          <CdCard key={cd.number} cd={cd} />\r\n        ))\r\n      : null}\r\n  </div>\r\n);\r\n","import * as React from \"react\";\r\nimport styles from \"./Cds.module.scss\";\r\nimport { ISingle } from \"../../../models/ISingle\";\r\nimport { IAlbum } from \"../../../models/IAlbum\";\r\nimport { CdCardList } from \"../../organisms/CdCardList\";\r\n\r\ntype ICdsProps = {\r\n  cds: (ISingle | IAlbum)[];\r\n  currentPage: string;\r\n  handleClickSwitch(choice: string): void;\r\n};\r\n\r\nexport const Cds = (props: ICdsProps) => (\r\n  <div className={styles.container}>\r\n    <h1>Cds Page</h1>\r\n    <p>Current page: {props.currentPage}</p>\r\n    <button onClick={() => props.handleClickSwitch(\"singles\")}>Singles</button>\r\n    <button onClick={() => props.handleClickSwitch(\"albums\")}>Albums</button>\r\n    <CdCardList cds={props.cds} />\r\n  </div>\r\n);\r\n","import { CdsCurrentPage } from \"../../../utils/constants\";\r\nimport { cdsActionTypes } from \"./actionTypes\";\r\nimport { ISingle } from \"../../../models/ISingle\";\r\nimport { IAlbum } from \"../../../models/IAlbum\";\r\nimport { Dispatch } from \"react\";\r\n\r\nexport type cdsActions =\r\n  | {\r\n      type: cdsActionTypes.FETCH_SINGLES_PENDING;\r\n    }\r\n  | {\r\n      type: cdsActionTypes.FETCH_SINGLES_REJECTED;\r\n    }\r\n  | {\r\n      type: cdsActionTypes.FETCH_SINGLES_FULFILLED;\r\n      payload: ISingle[];\r\n    }\r\n  | {\r\n      type: cdsActionTypes.FETCH_ALBUMS_PENDING;\r\n    }\r\n  | {\r\n      type: cdsActionTypes.FETCH_ALBUMS_REJECTED;\r\n    }\r\n  | {\r\n      type: cdsActionTypes.FETCH_ALBUMS_FULFILLED;\r\n      payload: IAlbum[];\r\n    }\r\n  | {\r\n      type: cdsActionTypes.SWITCH_CDS_PAGE;\r\n      payload: CdsCurrentPage;\r\n    };\r\n\r\n// Action Creators\r\n\r\nexport const switchCdsPage = (page: CdsCurrentPage): cdsActions => {\r\n  return {\r\n    type: cdsActionTypes.SWITCH_CDS_PAGE,\r\n    payload: page\r\n  };\r\n};\r\n\r\nexport const fetchSingles = () => (dispatch: Dispatch<any>): Promise<void> => {\r\n  dispatch({ type: cdsActionTypes.FETCH_SINGLES_PENDING });\r\n  return fetch(\r\n    \"https://raw.githubusercontent.com/shawnrivers/nogizaka-data/master/src/json/singles.json\"\r\n  )\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      dispatch({\r\n        type: cdsActionTypes.FETCH_SINGLES_FULFILLED,\r\n        payload: data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      dispatch({\r\n        type: cdsActionTypes.FETCH_SINGLES_REJECTED\r\n      });\r\n    });\r\n};\r\n\r\nexport const fetchAlbums = () => (dispatch: Dispatch<any>): Promise<void> => {\r\n  dispatch({ type: cdsActionTypes.FETCH_ALBUMS_PENDING });\r\n  return fetch(\r\n    \"https://raw.githubusercontent.com/shawnrivers/nogizaka-data/master/src/json/albums.json\"\r\n  )\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      dispatch({\r\n        type: cdsActionTypes.FETCH_ALBUMS_FULFILLED,\r\n        payload: data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      dispatch({\r\n        type: cdsActionTypes.FETCH_ALBUMS_REJECTED\r\n      });\r\n    });\r\n};\r\n","export enum CdsCurrentPage {\r\n  Single = \"singles\",\r\n  Album = \"albums\"\r\n}\r\n\r\nexport enum CdType {\r\n  A = \"A\",\r\n  B = \"B\",\r\n  C = \"C\",\r\n  D = \"D\",\r\n  T = \"T\",\r\n  L = \"Limited\"\r\n}\r\n\r\nexport enum SongType {\r\n  None = \"none\",\r\n  Title = \"title\",\r\n  Coupling = \"coupling\",\r\n  Under = \"under\",\r\n  Unit = \"unit\",\r\n  Solo = \"solo\",\r\n  FirstGeneration = \"first generation\",\r\n  SecondGeneration = \"second generation\",\r\n  ThirdGeneration = \"third generation\"\r\n}\r\n\r\nexport enum FocusPerformersType {\r\n  Center = \"center\",\r\n  Solo = \"solo\",\r\n  Unit = \"unit\",\r\n  None = \"\"\r\n}\r\n\r\nexport enum FetchStatus {\r\n  None,\r\n  Rejected,\r\n  Pending,\r\n  Fulfilled\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cds } from \"../../components/templates/Cds\";\r\nimport { switchCdsPage, fetchSingles, fetchAlbums } from \"./store/actions\";\r\nimport { CdsCurrentPage, FetchStatus } from \"../../utils/constants\";\r\nimport { ISingle } from \"../../models/ISingle\";\r\nimport { IAlbum } from \"../../models/IAlbum\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport type ICdsContainerProps = {\r\n  cds: {\r\n    singles: {\r\n      data: ISingle[];\r\n      fetchStatus: FetchStatus;\r\n    };\r\n    albums: {\r\n      data: IAlbum[];\r\n      fetchStatus: FetchStatus;\r\n    };\r\n  };\r\n  currentPage: CdsCurrentPage;\r\n  switchCdsPage(page: CdsCurrentPage): void;\r\n  fetchSingles(): void;\r\n  fetchAlbums(): void;\r\n};\r\n\r\nconst CdsContainer = (props: ICdsContainerProps) => {\r\n  useEffect(() => {\r\n    if (\r\n      props.cds.singles.fetchStatus !== FetchStatus.Fulfilled ||\r\n      props.cds.albums.fetchStatus !== FetchStatus.Fulfilled\r\n    ) {\r\n      props.fetchSingles();\r\n      props.fetchAlbums();\r\n    }\r\n  }, []);\r\n\r\n  console.log(props.currentPage);\r\n  let cdsContents: ISingle[] | IAlbum[];\r\n  switch (props.currentPage) {\r\n    case \"singles\":\r\n      cdsContents = props.cds.singles.data;\r\n      break;\r\n    case \"albums\":\r\n      cdsContents = props.cds.albums.data;\r\n      break;\r\n    default:\r\n      cdsContents = [];\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Cds\r\n      cds={cdsContents}\r\n      currentPage={props.currentPage}\r\n      handleClickSwitch={props.switchCdsPage}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  cds: state.cds,\r\n  currentPage: state.cds.currentPage\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  switchCdsPage: (page: CdsCurrentPage) => dispatch(switchCdsPage(page)),\r\n  fetchSingles: () => dispatch(fetchSingles()),\r\n  fetchAlbums: () => dispatch(fetchAlbums())\r\n});\r\n\r\nexport const CdsContianer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CdsContainer);\r\n","import { cdsActions } from \"./actions\";\r\nimport { cdsActionTypes } from \"./actionTypes\";\r\nimport { CdsCurrentPage, FetchStatus } from \"../../../utils/constants\";\r\nimport { ISingle } from \"../../../models/ISingle\";\r\nimport { IAlbum } from \"../../../models/IAlbum\";\r\n\r\nexport type ICdsState = {\r\n  singles: {\r\n    fetchStatus: FetchStatus;\r\n    data: ISingle[];\r\n  };\r\n  albums: {\r\n    fetchStatus: FetchStatus;\r\n    data: IAlbum[];\r\n  };\r\n  currentPage: CdsCurrentPage;\r\n};\r\n\r\nexport const initialCdsState: ICdsState = {\r\n  singles: {\r\n    fetchStatus: FetchStatus.None,\r\n    data: []\r\n  },\r\n  albums: {\r\n    fetchStatus: FetchStatus.None,\r\n    data: []\r\n  },\r\n  currentPage: CdsCurrentPage.Single\r\n};\r\n\r\nexport const cdsReducer = (\r\n  state: ICdsState = initialCdsState,\r\n  action: cdsActions\r\n) => {\r\n  switch (action.type) {\r\n    case cdsActionTypes.FETCH_SINGLES_PENDING:\r\n      return {\r\n        ...state,\r\n        singles: {\r\n          fetchStatus: FetchStatus.Pending,\r\n          data: state.singles.data\r\n        }\r\n      };\r\n    case cdsActionTypes.FETCH_SINGLES_REJECTED:\r\n      return {\r\n        ...state,\r\n        singles: {\r\n          fetchStatus: FetchStatus.Rejected,\r\n          data: state.singles.data\r\n        }\r\n      };\r\n    case cdsActionTypes.FETCH_SINGLES_FULFILLED:\r\n      return {\r\n        ...state,\r\n        singles: {\r\n          fetchStatus: FetchStatus.Fulfilled,\r\n          data: action.payload.slice().sort((itemA: ISingle, itemB: ISingle) => itemB.number - itemA.number)\r\n        }\r\n      };\r\n    case cdsActionTypes.FETCH_ALBUMS_PENDING:\r\n      return {\r\n        ...state,\r\n        albums: {\r\n          fetchStatus: FetchStatus.Pending,\r\n          data: state.albums.data\r\n        }\r\n      };\r\n    case cdsActionTypes.FETCH_ALBUMS_REJECTED:\r\n      return {\r\n        ...state,\r\n        albums: {\r\n          fetchStatus: FetchStatus.Rejected,\r\n          data: state.albums.data\r\n        }\r\n      };\r\n    case cdsActionTypes.FETCH_ALBUMS_FULFILLED:\r\n      return {\r\n        ...state,\r\n        albums: {\r\n          fetchStatus: FetchStatus.Fulfilled,\r\n          data: action.payload.slice().sort((itemA: IAlbum, itemB: IAlbum) => itemB.number - itemA.number)\r\n        }\r\n      };\r\n    case cdsActionTypes.SWITCH_CDS_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware,\r\n  compose,\r\n  Reducer\r\n} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { cdsReducer } from \"../containers/CdsContainer/store/reducers\";\r\nimport { IRootState } from \"./state\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nconst rootReducer: Reducer<IRootState> = combineReducers({\r\n  cds: cdsReducer\r\n});\r\n\r\n// For Redux devtool in Chrome.\r\nconst composeEnhancers =\r\n  (<any>window).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middleware = applyMiddleware(promise(), thunk);\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(middleware)\r\n);\r\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { CdsContianer } from \"./containers/CdsContainer\";\nimport \"./App.scss\";\nimport { store } from \"./stores/appStore\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"nogizaka-lib\" >\n        <div className=\"app\">\n          <Switch>\n            <Route exact path=\"/cds\" component={CdsContianer} />\n            <Redirect exact from=\"/\" to=\"/cds\" />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}